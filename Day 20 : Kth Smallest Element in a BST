//Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution
{
    public int kthSmallest(TreeNode root, int k)
    {
        ArrayList<Integer> al = new ArrayList<Integer>();
        traverse(root,al);
        int ans = al.get(k-1);
        return ans;
    }
    public void traverse(TreeNode root, ArrayList<Integer> al)
    {
        if(root.left != null)
            traverse(root.left,al);
        al.add(root.val);
        if(root.right != null)
            traverse(root.right,al);
    }
}
