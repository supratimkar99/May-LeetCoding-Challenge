//Given a singly linked list, group all odd nodes together followed by the even nodes.
//Please note here we are talking about the node number and not the value in the nodes.
//ou should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head)
    {
        ListNode odd = new ListNode();
        ListNode even = new ListNode();
        ListNode oddstart = new ListNode(); //to keep track of start of odd list
        
        
        if(head == null || head.next == null || head.next.next==null)
            return head;
        
        int i=3; //starting with 3rd node
        
        odd = head;
        oddstart = head;
        
        //for special case of 3 nodes (to avoid link of 2->4)
        ListNode evenstart = new ListNode(head.next.val); //to keep track of start of even list
        even = evenstart;
        
        //to start with 3rd node
        head = head.next.next;
        
        while(head!=null)
        {   
            ListNode temp = new ListNode(head.val);
            if(i%2!=0)
            {
                //To avoid further links in the chain that might remain without being overwritten
                odd.next=temp;
                odd=temp;
            }
            else
            {
                even.next=temp;
                even=temp;
            }
            head=head.next;
            
            i++;
        }
        odd.next=evenstart;
        return oddstart;
    }
}
