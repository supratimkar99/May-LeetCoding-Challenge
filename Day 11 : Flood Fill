//n image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).
//Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, "flood fill" the image.
//To perform a "flood fill", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.
//Replace the color of all of the aforementioned pixels with the newColor.

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor)
    {
        boolean[][] flag = new boolean[image.length][image[0].length];
        int refColor = image[sr][sc];
        fill(image, sr, sc, newColor, flag, refColor);
        return image;
    }
    public void fill(int[][] image, int sr, int sc, int newColor, boolean[][] flag, int refColor)
    {
        if(sr<0 || sr>=image.length || sc<0 || sc>=image[0].length)
            return;
        if(flag[sr][sc]==true || image[sr][sc]!=refColor)
            return;
        image[sr][sc] = newColor;
        flag[sr][sc] = true;
        
        fill(image, sr, sc+1, newColor, flag, refColor);
        fill(image, sr, sc-1, newColor, flag, refColor);
        fill(image, sr+1, sc, newColor, flag, refColor);
        fill(image, sr-1, sc, newColor, flag, refColor);
    }
}
