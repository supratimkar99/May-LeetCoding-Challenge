//Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.
//Return the intersection of these two interval lists.

class Solution
{
    public int[][] intervalIntersection(int[][] A, int[][] B)
    {
        int a[][] = new int[1000][2];
        int c=0,i=0,j=0,h,l;
        while(i<A.length && j<B.length) 
        {
            l = Math.max(A[i][0], B[j][0]); 
            h = Math.min(A[i][1], B[j][1]);
            
            if(l<=h) //checking intersection
            {
                a[c][0] = l;  //lower limit
                a[c][1] = h;  //upper limit
                c++;
            }
            
            if(A[i][1] >= B[j][1])  //if A[i].upper is not covered by B[i].upper
                j++;
            else
                i++;
            
        }
        int ans[][] = new int[c][2];
        for(i=0; i<c; i++)
        { 
            ans[i][0] = a[i][0];
            ans[i][1] = a[i][1];
        }
        return ans;
    }
}
